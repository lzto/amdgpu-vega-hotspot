diff -rau linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/amdgpu_dpm.h linux-4.19/drivers/gpu/drm/amd/amdgpu/amdgpu_dpm.h
--- linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/amdgpu_dpm.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/amdgpu/amdgpu_dpm.h	2018-10-24 12:35:37.257278032 +0200
@@ -263,6 +263,12 @@
 #define amdgpu_dpm_read_sensor(adev, idx, value, size) \
 		((adev)->powerplay.pp_funcs->read_sensor((adev)->powerplay.pp_handle, (idx), (value), (size)))
 
+#define amdgpu_dpm_get_temperature_asic_max(adev) \
+		((adev)->powerplay.pp_funcs->get_temperature_asic_max((adev)->powerplay.pp_handle))
+
+#define amdgpu_dpm_have_temperature_asic_max(adev) \
+		((adev)->powerplay.pp_funcs->have_temperature_asic_max((adev)->powerplay.pp_handle))
+
 #define amdgpu_dpm_set_fan_control_mode(adev, m) \
 		((adev)->powerplay.pp_funcs->set_fan_control_mode((adev)->powerplay.pp_handle, (m)))
 
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/amdgpu_pm.c linux-4.19/drivers/gpu/drm/amd/amdgpu/amdgpu_pm.c
--- linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/amdgpu_pm.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/amdgpu/amdgpu_pm.c	2018-10-24 12:35:37.257278032 +0200
@@ -996,6 +996,28 @@
 	return snprintf(buf, PAGE_SIZE, "%d\n", temp);
 }
 
+static ssize_t amdgpu_hwmon_show_temp_asic_max(struct device *dev,
+				      struct device_attribute *attr,
+				      char *buf)
+{
+	struct amdgpu_device *adev = dev_get_drvdata(dev);
+	struct drm_device *ddev = adev->ddev;
+	int temp;
+
+	/* Can't get temperature when the card is off */
+	if  ((adev->flags & AMD_IS_PX) &&
+	     (ddev->switch_power_state != DRM_SWITCH_POWER_ON))
+		return -EINVAL;
+
+	if (!(adev->powerplay.pp_funcs &&
+		 adev->powerplay.pp_funcs->get_temperature_asic_max))
+		temp = 0;
+	else
+		temp = amdgpu_dpm_get_temperature_asic_max(adev);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", temp);
+}
+
 static ssize_t amdgpu_hwmon_show_temp_thresh(struct device *dev,
 					     struct device_attribute *attr,
 					     char *buf)
@@ -1369,6 +1391,7 @@
 static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, amdgpu_hwmon_show_temp, NULL, 0);
 static SENSOR_DEVICE_ATTR(temp1_crit, S_IRUGO, amdgpu_hwmon_show_temp_thresh, NULL, 0);
 static SENSOR_DEVICE_ATTR(temp1_crit_hyst, S_IRUGO, amdgpu_hwmon_show_temp_thresh, NULL, 1);
+static SENSOR_DEVICE_ATTR(temp2_input, S_IRUGO, amdgpu_hwmon_show_temp_asic_max, NULL, 0);
 static SENSOR_DEVICE_ATTR(pwm1, S_IRUGO | S_IWUSR, amdgpu_hwmon_get_pwm1, amdgpu_hwmon_set_pwm1, 0);
 static SENSOR_DEVICE_ATTR(pwm1_enable, S_IRUGO | S_IWUSR, amdgpu_hwmon_get_pwm1_enable, amdgpu_hwmon_set_pwm1_enable, 0);
 static SENSOR_DEVICE_ATTR(pwm1_min, S_IRUGO, amdgpu_hwmon_get_pwm1_min, NULL, 0);
@@ -1387,6 +1410,7 @@
 	&sensor_dev_attr_temp1_input.dev_attr.attr,
 	&sensor_dev_attr_temp1_crit.dev_attr.attr,
 	&sensor_dev_attr_temp1_crit_hyst.dev_attr.attr,
+	&sensor_dev_attr_temp2_input.dev_attr.attr,
 	&sensor_dev_attr_pwm1.dev_attr.attr,
 	&sensor_dev_attr_pwm1_enable.dev_attr.attr,
 	&sensor_dev_attr_pwm1_min.dev_attr.attr,
@@ -1409,6 +1433,11 @@
 	struct device *dev = kobj_to_dev(kobj);
 	struct amdgpu_device *adev = dev_get_drvdata(dev);
 	umode_t effective_mode = attr->mode;
+        
+	if ((!adev->powerplay.pp_funcs->have_temperature_asic_max ||
+	     !amdgpu_dpm_have_temperature_asic_max(adev)) &&
+	    (attr == &sensor_dev_attr_temp2_input.dev_attr.attr))
+		return 0;
 
 
 	/* Skip fan attributes if fan is not present */
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/ci_dpm.c linux-4.19/drivers/gpu/drm/amd/amdgpu/ci_dpm.c
--- linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/ci_dpm.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/amdgpu/ci_dpm.c	2018-10-24 12:35:37.257278032 +0200
@@ -6224,6 +6224,31 @@
 	return actual_temp;
 }
 
+/* get temperature in millidegrees */
+static int ci_dpm_get_temp_asic_max(void *handle)
+{
+	u32 temp;
+	int actual_temp = 0;
+	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
+
+	temp = (RREG32_SMC(ixCG_MULT_THERMAL_STATUS) & CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP_MASK) >>
+		CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP__SHIFT;
+
+	if (temp & 0x200)
+		actual_temp = 255;
+	else
+		actual_temp = temp & 0x1ff;
+
+	actual_temp = actual_temp * 1000;
+
+	return actual_temp;
+}
+
+static int ci_dpm_have_temp_asic_max(void *handle)
+{
+	return 1;
+}
+
 static int ci_set_temperature_range(struct amdgpu_device *adev)
 {
 	int ret;
@@ -6806,6 +6831,8 @@
 };
 
 static const struct amd_pm_funcs ci_dpm_funcs = {
+	.get_temperature_asic_max = &ci_dpm_get_temp_asic_max,
+	.have_temperature_asic_max = &ci_dpm_have_temp_asic_max,
 	.pre_set_power_state = &ci_dpm_pre_set_power_state,
 	.set_power_state = &ci_dpm_set_power_state,
 	.post_set_power_state = &ci_dpm_post_set_power_state,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/si_dpm.c linux-4.19/drivers/gpu/drm/amd/amdgpu/si_dpm.c
--- linux-4.19-orig/drivers/gpu/drm/amd/amdgpu/si_dpm.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/amdgpu/si_dpm.c	2018-10-24 12:35:37.260611341 +0200
@@ -7864,6 +7864,31 @@
 	return actual_temp;
 }
 
+static int si_dpm_get_temp_asic_max(void *handle)
+{
+	u32 temp;
+	int actual_temp = 0;
+	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
+
+	temp = (RREG32(CG_MULT_THERMAL_STATUS) & ASIC_MAX_TEMP_MASK) >>
+		ASIC_MAX_TEMP_SHIFT;
+
+	if (temp & 0x200)
+		actual_temp = 255;
+	else
+		actual_temp = temp & 0x1ff;
+
+	actual_temp = (actual_temp * 1000);
+
+	return actual_temp;
+}
+
+static int si_dpm_have_temp_asic_max(void *handle)
+{
+	return 1;
+}
+
+
 static u32 si_dpm_get_sclk(void *handle, bool low)
 {
 	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
@@ -8046,6 +8071,8 @@
 };
 
 static const struct amd_pm_funcs si_dpm_funcs = {
+	.get_temperature_asic_max = &si_dpm_get_temp_asic_max,
+	.have_temperature_asic_max = &si_dpm_have_temp_asic_max,
 	.pre_set_power_state = &si_dpm_pre_set_power_state,
 	.set_power_state = &si_dpm_set_power_state,
 	.post_set_power_state = &si_dpm_post_set_power_state,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/include/kgd_pp_interface.h linux-4.19/drivers/gpu/drm/amd/include/kgd_pp_interface.h
--- linux-4.19-orig/drivers/gpu/drm/amd/include/kgd_pp_interface.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/include/kgd_pp_interface.h	2018-10-24 12:43:24.093697463 +0200
@@ -269,6 +269,9 @@
 	int (*get_display_mode_validation_clocks)(void *handle,
 		struct amd_pp_simple_clock_info *clocks);
 	int (*notify_smu_enable_pwe)(void *handle);
+	// my ASIC_MAX temperature
+	int (*get_temperature_asic_max)(void *handle);
+	int (*have_temperature_asic_max)(void *handle);
 };
 
 #endif
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/amd_powerplay.c linux-4.19/drivers/gpu/drm/amd/powerplay/amd_powerplay.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/amd_powerplay.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/amd_powerplay.c	2018-10-24 14:47:59.739539476 +0200
@@ -576,6 +576,41 @@
 	return ret;
 }
 
+static int pp_dpm_get_temperature_asic_max(void *handle)
+{
+	struct pp_hwmgr  *hwmgr = handle;
+	int ret = 0;
+
+	if (!hwmgr || !hwmgr->pm_en)
+		return -EINVAL;
+
+	if (hwmgr->hwmgr_func->get_temperature_asic_max == NULL) {
+		pr_info("%s was not implemented.\n", __func__);
+		return 0;
+	}
+	mutex_lock(&hwmgr->smu_lock);
+	ret = hwmgr->hwmgr_func->get_temperature_asic_max(hwmgr);
+	mutex_unlock(&hwmgr->smu_lock);
+	return ret;
+}
+
+static int pp_dpm_have_temperature_asic_max(void *handle)
+{
+	struct pp_hwmgr  *hwmgr = handle;
+
+	if (!hwmgr || !hwmgr->pm_en)
+		return 0;
+	
+	if (hwmgr->hwmgr_func == NULL)
+		return 0;
+
+	if (hwmgr->hwmgr_func->get_temperature_asic_max == NULL)
+		return 0;
+	// we have asic max
+	return 1;
+}
+
+
 static int pp_dpm_get_pp_num_states(void *handle,
 		struct pp_states_info *data)
 {
@@ -1226,6 +1261,8 @@
 }
 
 static const struct amd_pm_funcs pp_dpm_funcs = {
+	.get_temperature_asic_max = pp_dpm_get_temperature_asic_max,
+	.have_temperature_asic_max = pp_dpm_have_temperature_asic_max,
 	.load_firmware = pp_dpm_load_fw,
 	.wait_for_fw_loading_complete = pp_dpm_fw_loading_complete,
 	.force_performance_level = pp_dpm_force_performance_level,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_hwmgr.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_hwmgr.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_hwmgr.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_hwmgr.c	2018-10-24 12:35:37.260611341 +0200
@@ -5053,6 +5053,7 @@
 	.set_mclk_od = smu7_set_mclk_od,
 	.get_clock_by_type = smu7_get_clock_by_type,
 	.read_sensor = smu7_read_sensor,
+	.get_temperature_asic_max = smu7_thermal_get_temperature_asic_max,
 	.dynamic_state_management_disable = smu7_disable_dpm_tasks,
 	.avfs_control = smu7_avfs_control,
 	.disable_smc_firmware_ctf = smu7_thermal_disable_alert,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.c	2018-10-24 12:35:37.260611341 +0200
@@ -301,6 +301,30 @@
 }
 
 /**
+* Reads the remote temperature from the SIslands thermal controller (ASIC MAX)
+*
+* @param    hwmgr The address of the hardware manager.
+*/
+int smu7_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr)
+{
+	int temp;
+
+	temp = PHM_READ_VFPF_INDIRECT_FIELD(hwmgr->device, CGS_IND_REG__SMC,
+			CG_MULT_THERMAL_STATUS, ASIC_MAX_TEMP);
+
+	/* Bit 9 means the reading is lower than the lowest usable value. */
+	if (temp & 0x200)
+		temp = SMU7_THERMAL_MAXIMUM_TEMP_READING;
+	else
+		temp = temp & 0x1ff;
+
+	temp *= PP_TEMPERATURE_UNITS_PER_CENTIGRADES;
+
+	return temp;
+}
+
+
+/**
 * Set the requested temperature range for high and low alert signals
 *
 * @param    hwmgr The address of the hardware manager.
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.h linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.h
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/smu7_thermal.h	2018-10-24 12:35:37.260611341 +0200
@@ -39,6 +39,7 @@
 #define FDO_PWM_MODE_STATIC_RPM 5
 
 extern int smu7_thermal_get_temperature(struct pp_hwmgr *hwmgr);
+extern int smu7_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr);
 extern int smu7_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
 extern int smu7_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr, struct phm_fan_speed_info *fan_speed_info);
 extern int smu7_fan_ctrl_get_fan_speed_percent(struct pp_hwmgr *hwmgr, uint32_t *speed);
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_hwmgr.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_hwmgr.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_hwmgr.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_hwmgr.c	2018-10-24 12:35:37.260611341 +0200
@@ -4885,6 +4885,7 @@
 	.set_fan_control_mode = vega10_set_fan_control_mode,
 	.get_fan_control_mode = vega10_get_fan_control_mode,
 	.read_sensor = vega10_read_sensor,
+	.get_temperature_asic_max = vega10_thermal_get_temperature_asic_max,
 	.get_dal_power_level = vega10_get_dal_power_level,
 	.get_clock_by_type_with_latency = vega10_get_clock_by_type_with_latency,
 	.get_clock_by_type_with_voltage = vega10_get_clock_by_type_with_voltage,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.c	2018-10-24 12:35:37.260611341 +0200
@@ -352,6 +352,29 @@
 }
 
 /**
+* Reads the remote temperature from ASIC MAX
+*
+* @param    hwmgr The address of the hardware manager.
+*/
+int vega10_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr)
+{
+	struct amdgpu_device *adev = hwmgr->adev;
+	int temp;
+
+	temp = RREG32_SOC15(THM, 0, mmCG_MULT_THERMAL_STATUS);
+
+	temp = (temp & CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP_MASK) >>
+			CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP__SHIFT;
+
+	temp = temp & 0x1ff;
+
+	temp *= PP_TEMPERATURE_UNITS_PER_CENTIGRADES;
+
+	return temp;
+}
+
+
+/**
 * Set the requested temperature range for high and low alert signals
 *
 * @param    hwmgr The address of the hardware manager.
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.h linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.h
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega10_thermal.h	2018-10-24 12:35:37.260611341 +0200
@@ -51,6 +51,7 @@
 
 
 extern int vega10_thermal_get_temperature(struct pp_hwmgr *hwmgr);
+extern int vega10_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr);
 extern int vega10_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
 extern int vega10_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr,
 		struct phm_fan_speed_info *fan_speed_info);
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_hwmgr.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_hwmgr.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_hwmgr.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_hwmgr.c	2018-10-24 12:35:37.260611341 +0200
@@ -2372,6 +2372,7 @@
 	.set_fan_control_mode = vega12_set_fan_control_mode,
 	.get_fan_control_mode = vega12_get_fan_control_mode,
 	.read_sensor = vega12_read_sensor,
+	.get_temperature_asic_max = vega12_thermal_get_temperature_asic_max,
 	.get_dal_power_level = vega12_get_dal_power_level,
 	.get_clock_by_type_with_latency = vega12_get_clock_by_type_with_latency,
 	.get_clock_by_type_with_voltage = vega12_get_clock_by_type_with_voltage,
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.c linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.c
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.c	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.c	2018-10-24 12:35:37.260611341 +0200
@@ -160,6 +160,28 @@
 }
 
 /**
+* Reads the remote temperature from the SIslands thermal controller (ASIC_MAX).
+*
+* @param    hwmgr The address of the hardware manager.
+*/
+int vega12_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr)
+{
+	struct amdgpu_device *adev = hwmgr->adev;
+	int temp = 0;
+
+	temp = RREG32_SOC15(THM, 0, mmCG_MULT_THERMAL_STATUS);
+
+	temp = (temp & CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP_MASK) >>
+			CG_MULT_THERMAL_STATUS__ASIC_MAX_TEMP__SHIFT;
+
+	temp = temp & 0x1ff;
+
+	temp *= PP_TEMPERATURE_UNITS_PER_CENTIGRADES;
+	return temp;
+}
+
+
+/**
 * Set the requested temperature range for high and low alert signals
 *
 * @param    hwmgr The address of the hardware manager.
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.h linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.h
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/hwmgr/vega12_thermal.h	2018-10-24 12:35:37.260611341 +0200
@@ -50,6 +50,7 @@
 #define FDO_PWM_MODE_STATIC_RPM 5
 
 extern int vega12_thermal_get_temperature(struct pp_hwmgr *hwmgr);
+extern int vega12_thermal_get_temperature_asic_max(struct pp_hwmgr *hwmgr);
 extern int vega12_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
 extern int vega12_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr,
 		struct phm_fan_speed_info *fan_speed_info);
diff -rau linux-4.19-orig/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h linux-4.19/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h
--- linux-4.19-orig/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h	2018-10-22 08:37:37.000000000 +0200
+++ linux-4.19/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h	2018-10-24 12:35:37.263944651 +0200
@@ -328,6 +328,8 @@
 	int (*set_power_limit)(struct pp_hwmgr *hwmgr, uint32_t n);
 	int (*powergate_mmhub)(struct pp_hwmgr *hwmgr);
 	int (*smus_notify_pwe)(struct pp_hwmgr *hwmgr);
+	// my ASIC MAX temperature
+	int (*get_temperature_asic_max)(struct pp_hwmgr *hwmgr);
 };
 
 struct pp_table_func {
